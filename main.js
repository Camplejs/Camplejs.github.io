(()=>{"use strict";var e={370:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},310:(e,t,n)=>{e.exports=n.p+"images/big_logo.png"},291:(e,t,n)=>{e.exports=n.p+"images/cample.png"},986:(e,t,n)=>{e.exports=n.p+"images/component.png"},741:(e,t,n)=>{e.exports=n.p+"images/component1.png"},137:(e,t,n)=>{e.exports=n.p+"images/component2.png"},631:(e,t,n)=>{e.exports=n.p+"images/logo.png"},525:(e,t,n)=>{e.exports=n.p+"images/menu.svg"},559:(e,t,n)=>{e.exports=n.p+"images/ts.svg"}},t={};function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");if(a.length)for(var o=a.length-1;o>-1&&!e;)e=a[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{const e=/\{{(.*?)}}/g,t=e=>{throw new Error(e)},a=t=>{let n=!1;return t.replace(e,((e,t)=>{const a=t.trim();return a&&!/^[0-9]+$/.test(a[0])&&(n=!0),e})),n},o=e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,i=e=>JSON.parse(JSON.stringify(e)),r=e=>"[object Function]"===Object.prototype.toString.call(e),s=(e,n)=>{if(e&&e.value&&Array.isArray(e.value)){e.value=e.value.map((e=>e.replace(/\s+/g,"")));const t={import:e.value.join(";"),exportId:e.exportId,index:n,importIndex:e.importIndex};return JSON.stringify(t)}t("Import value is array")};class p{constructor(e,t={trimHTML:!1}){this.selector=e||"",this.template="",this.trimHTML=void 0!==t.trimHTML&&t.trimHTML,this.exportData={},this.style=""}render(e="",n={}){if(this.template=((e,t)=>void 0===t?e:e.replace(/\{{(.*?)}}/g,((e,n)=>{const a=n.trim();return t[a]&&t[a]._getSelector?((e,t)=>{const n=document.createElement("template");return t.forEach((({selector:e,value:t})=>{void 0!==t&&""!==t&&n.setAttribute(e,t)})),n})(0,[{selector:"data-cample",value:t[a]._getSelector}]).outerHTML:e})))(e,n),"string"==typeof this.selector){const e=document.querySelector(this.selector);e&&(e.innerHTML=this.template),Object.keys(n).forEach((e=>{n[e]._getStyle&&(this.style+=n[e]._getStyle)}));const a=(e,t)=>{e&&this.exportData.hasOwnProperty(e)&&this.exportData[e].components.push(t)},i=(e,t,a,o=0)=>{e&&this.exportData.hasOwnProperty(e)&&(this.exportData[e].value[a][o]=t,this.exportData[e].components.forEach((t=>{t.render(this.trimHTML,e&&this.exportData.hasOwnProperty(e)?this.exportData[e].value:void 0,void 0!==t._getExportId?n[t]._getExportId:void 0,"dynamic")})))};(e=>{if(void 0===e)return;const t=document.createElement("style");t.setAttribute("type","text/css"),t.insertAdjacentHTML("afterbegin",e),document.head.appendChild(t)})(this.style),Object.keys(n).forEach(((e,s)=>{const p=n[e]._getSelector;if(n[e].render(this.trimHTML,p&&this.exportData.hasOwnProperty(p)?this.exportData[p].value:void 0,void 0!==n[e]._getExportId?n[e]._getExportId:n[e]._getExport?s:void 0),p&&this.exportData.hasOwnProperty(p)&&a(p,n[e]),n[e]._getExport){const a=r(n[e]._getExport)?n[e]._getExport(i):n[e]._getExport;a&&(this.exportData=((e,n,a)=>{const i=e;return o(n)?Object.keys(n).forEach(((e,t)=>{if(!i.hasOwnProperty(e)){const t={value:{},components:[]};i[e]=t}const o=n[e];i[e].value[a]=o})):t("Export data is object"),i})(this.exportData,a,void 0!==n[e]._getExportId?n[e]._getExportId:s))}}))}}}const c=(e,n,a,o,i)=>{let s,p={};const c=(t,n,a)=>({elements:t,functions:n,currentData:e,importedData:o});if(Array.isArray(n)){s=n[0],p=n[1];let e={};void 0!==p.elements&&(e=i||{}),s(c(e,a))}else r(n)?(s=n,s(c({},a))):t("Script is an array or a function")},l=(e,t,n,a,o,i)=>{a&&Object.entries(a).forEach((([a,r])=>{const s=Array.isArray(r)?r[1]:r,p=i.filter((e=>e.key===s));e(a,s,t,n,o,p)}))},d=Node.prototype.appendChild,h=(e,n,a,o)=>{let i;const r=(e,a,o)=>{if(o){if(n){"undefined"!==e&&void 0!==e||t("ExportId included"),"undefined"!==a&&void 0!==a||t("Index included");let r=Array.isArray(o)?o:o.split(";");r=r.map((e=>{if(!e.includes(":")){if(e.includes("[")){e.includes("]")||t("Syntax value error");const n=JSON.parse(e);return Array.isArray(n)||t("Syntax value error"),n}return e}{const n=e.split(":");if(2===n.length)return{value:n[0],index:n[1]};t("Syntax value error")}})),r.forEach((o=>{if(n.hasOwnProperty(e))if(Array.isArray(o))if(2===o.length){const r=o[0],s=o[1],p=n[e][a];p?p.data.hasOwnProperty(r)?(i||(i={}),i[r]=p.data[r][s]):p.functions.hasOwnProperty(r)?(i||(i={}),i[r]=p.functions[r][s]):t(`Property value "${o[0]}" not found`):t("Data error")}else t("Syntax value error");else{const r=n[e][a],s=(e,n)=>{const a=e[n];Array.isArray(a)?(i||(i={}),i[n]=a[0]):t("Data error")};r?r.data.hasOwnProperty(o)?s(r.data,o):r.functions.hasOwnProperty(o)?s(r.functions,o):t(`Property value "${o}" not found`):t("Data error")}else t("ExportId not found")}))}}else t("Nothing to import")};if(e){if(e.hasAttribute("data-cample-import")){let a=e.getAttribute("data-cample-import");if(a)if(n){a=a.replace(/\s+/g,"");const e=JSON.parse(a);r(e.exportId,e.index?e.index:0,e.import)}else t("Nothing to import")}}else a&&n&&a.exportId&&void 0!==o&&r(a.exportId,o,a.value);return i},m=(e,n,a)=>{let o;if(e)if(n&&n.value){const a=s(n,0);if(a)if(e.hasAttribute("data-cample-import")){let a=e.getAttribute("data-cample-import");if(a){a=a.replace(/\s+/g,"");const p=JSON.parse(a);if(p.import){"undefined"===p.exportId&&t("ExportId included"),"undefined"===p.index&&t("Index included");const a=JSON.parse(p.import),c=a.data?a.data.split(";"):[],l=a.functions?a.functions.split(";"):[],d=(r=l,(i=c).concat(r.filter((e=>i.indexOf(e)<0))));if(p.exportId===n.exportId){const a={value:((e,n)=>{const a=[],o=[...n];return e.forEach((e=>{if(e.includes("[")&&Array.isArray(JSON.parse(e))){e.includes("]")||t("Syntax value error");const n=JSON.parse(e);n[0]&&-1!==o.indexOf(n[0])&&o.splice(o.indexOf(n[0]),1)}else-1!==o.indexOf(e)&&o.splice(o.indexOf(e),1);a.push(e)})),o.forEach((e=>{a.push(e)})),a})(d,n.value),exportId:p.exportId,importIndex:p.importIndex};o=a;const i=s(a,p.index);i&&e.setAttribute("data-cample-import",i)}else t("ExportId error")}}}else o=n,e.setAttribute("data-cample-import",a)}else void 0!==a&&e.setAttribute("data-cample-import",a);var i,r;return o};class u{constructor(){this.dynamicNodes=[],this.data={data:{values:[],components:[],currentId:0}}}}class y{constructor(e,t={}){this.selector=e,this.template="",this.options=t,this.trimHTML=t.trimHTML,this.attributes=t.attributes,this.style=t.style,this.exportId=t.exportId}get _getSelector(){return this.selector}get _getStyle(){return this.style}get _getExportId(){return this.exportId}}class f extends y{constructor(e,t={}){super(e,t),this.script=t.script,this._dynamic=new u,this.import=t.import,this.importId=void 0,this.export=t.export,this.setExportData=void 0,this.exportDataObjects=[],this.exportObj=void 0,this.functions=t.functions,this.values=void 0!==t.values?t.values:void 0}get _getImport(){return this.import}}const b=e=>{if(!e.includes("."))return e;{const n=e.split(".");if(n.length>1){const e=n.filter(((e,t)=>0!==t));return{key:n[0],properties:e}}t("Key error")}},g=(e,n,a,i,r)=>{const[s,p,c]=((e,n)=>{const a=o(e),i=(e=>!!e.includes("[")&&(e.includes("]")||t("Syntax value error"),!0))(n);if(a)i&&e.properties.length>0&&t("Value error");else if(i){const t=/\[+(.*?)\]+/g;e=e.replace(t,((e,t)=>t))}return[e,i,a]})(b(e),e),l=c?s.key:s,d=c?s.properties:void 0,h={originKey:l,key:p?s:e,isValue:p,isOrigin:l===n||l===a||l===i,isProperty:!(!d||!d.length),isClass:r};return d&&d.length&&(h.properties=d),h},{setAttribute:v,removeAttribute:T}=Element.prototype,x=/\{\{\s*([^}]+)\s*\}\}|([^{}]+)/g,{push:w}=Array.prototype,E=(e,t)=>{let n=e;return t.forEach((e=>{n=n[e]})),n},D=(e,n,a)=>{let i=a?{}:"";if(o(n)&&n.hasOwnProperty(e)){const o=n[e];Object.entries(o).forEach((([e,n])=>{n&&("string"==typeof e?a?i[e]=null:i+=e:t("Value name type is string"))}))}else t("Values error");return[i,!1]},k=(n,o,i,s,p,c,l,d,h,m)=>{const u=((e,n)=>{const a=document.createElement("template");a.innerHTML=n?e.trim():e,a.content.children.length>1&&t("Component include only one node with type 'Element'");const o=e=>{switch(e.nodeType){case Node.ELEMENT_NODE:if("pre"===e.tagName)return;break;case Node.TEXT_NODE:if(!/\S/.test(e.textContent))return void e.remove()}for(let t=0;t<e.childNodes.length;t++)o(e.childNodes.item(t))};return o(a.content.childNodes[0]),a.content.firstElementChild})(n,s),y={el:u,nodes:[],values:[]};h&&(y.key=[]);let f=-1;const b=n=>{if(f++,n.nodeType===Node.ELEMENT_NODE){(e=>{if(e){const t=Array.from(e.childNodes).filter((({nodeType:e,textContent:t})=>e===Node.TEXT_NODE&&""!==(null==t?void 0:t.trim()))),n=t.map((e=>e.textContent)).join().trim();t.length&&a(n)&&t.forEach((t=>{if(t.textContent&&t.nodeValue&&a(t.textContent)){const n=/\{\{\s*([^}]+)\s*\}\}|([^{}]+)/g,a=[...t.textContent.matchAll(n)];a.map(((n,o)=>{const i=n[0],r=document.createTextNode(i);o===a.length-1?e.replaceChild(r,t):e.insertBefore(r,t)}))}}))}})(n),((e,n,o,i,s,p,c,l,d,h,m,u,y,f)=>{const b=Array.from(e.attributes).filter((e=>a(e.value)));if(b.length){const c=/\{{(.*?)}}/g;b.forEach((b=>{const E=b.value;if("key"!==b.name)if("class"!==b.name)if("data-cample-import"!==b.name)if(b.name.includes(":")||b.value.includes("(")||b.value.includes(")")){":"!==b.name[0]&&t("Event error");let a="";E.replace(c,((e,t)=>{const n=t.trim();return a=n,e}));const d=(e=>{const t=e.split("(")[0];let n="";return e.replace(/\(([^)]+)\)/g,((e,t)=>{const a=t.replace(/\s/g,"");return n=a,e})),{key:t,arguments:n.split(",")}})(a),h=[...d.arguments],m=null==f?void 0:f(d.key,p,a);r(m)||t("Data key is of function type"),T.call(e,b.name);const u=(e,t)=>{((e,t,n,a,o)=>{e&&e.addEventListener(a,(()=>{const e=n.map((e=>o(e)));t().apply(void 0,e)}))})(e,m,h,b.name.substring(1),(e=>i(e,p,t,n)))},y={id:l.length,type:"event",value:(e,t)=>u(e,t)};l.push(y),s.push(o)}else{const e=(e=>{const t=e.replace(/\s+/g,"");return/\[+(.*?)\]+/g.test(t)})(E),t={};e||E.replace(c,((e,n)=>{if(!t.hasOwnProperty(n)){const e=g(n,d,h,m);t[n]=e}return n}));const n={name:b.name,value:e?[E,e]:E,keys:t},a={id:l.length,type:"attribute",value:n};l.push(a),s.push(o)}else{const e={id:l.length,type:"import",value:{value:E.replace(/\{{{(.*?)}}}/g,((e,t)=>t||e))}};l.push(e),s.push(o)}else{const t=Array.from(e.classList).map((e=>{if(a(e)){const t=e.replace(c,((e,t)=>t));return g(t,d,h,m,!0)}return e})),n={id:l.length,type:"class",value:{classList:t,oldClassList:{}}};l.push(n),s.push(o),v.call(e,"class","")}else u&&y?([...b.value.matchAll(x)].forEach((e=>{let t=e[0];if(a(t)){const e=t.replace(c,((e,t)=>t));t=g(e,d,h,m,!1)}w.call(y,t)})),T.call(e,b.name)):t("key error")}))}})(n,o,f,p,y.nodes,i,0,y.values,c,l,d,0===f&&h,y.key,m);for(let e=n.firstChild;e;e=e.nextSibling)b(e)}else if(n.nodeType===Node.TEXT_NODE){const a=n.textContent;if(a){const n=(n=>{let a;return n.replace(e,((e,n)=>{const o=n.trim();return o.includes("(")||o.includes(")")?t("Function key includes only in event attr"):a=o,e})),a})(a);if(n){const e=y.values.filter((e=>"dynamicText"===e.type&&e.value.key.key===n));e.length>1&&t("id is unique");const a=y.values.indexOf(e[0]);if(a>-1)y.values[a].value.texts.push(y.nodes.length);else{const e={key:g(n,c,l,d),texts:[y.nodes.length]};y.values.push({type:"dynamicText",value:e})}y.nodes.push(f)}}}};return b(u),y},j=Element.prototype.setAttribute,_=/\{{(.*?)}}/g,A=DOMTokenList.prototype.add,I=DOMTokenList.prototype.remove;class O extends f{constructor(e,t,n={}){super(e,n),this.template=t,this.data=n.data}_getExport(e){return this.setExportData=e,this.exportObj}render(e,n,a,s="static"){const p=o(this.data);if(void 0===this.selector||p)t(p?"Data error":"Property 'selector' is required");else{const p=(e,t=!1)=>{const n=this._dynamic.data.data.components.map((e=>e.nodes));[].concat.apply([],n).forEach((n=>{if(t)this._dynamic.dynamicNodes.push(n);else{let t=!1;for(let a=0;a<n.values.length;a++){const o=n.values[a];if("dynamicText"===o.type||"attribute"===o.type)if("dynamicText"===o.type){if(o.value.key.key===e){t=!0;break}}else{if(o.value.keys.hasOwnProperty(e)){t=!0;break}if(t)break}}t&&this._dynamic.dynamicNodes.push(n)}}))},u=(e,n=!0)=>{const a=this._dynamic.data.data.values.filter((t=>(null==t?void 0:t.id)===e));return a.length>1&&t("id is unique"),a&&a[0]?n?a[0].value:a[0]:void 0},y=e=>{const t={data:{},functions:{}};return Object.entries(e).forEach((([n,a])=>{"data"===n?t.data=i(e.data):Object.entries(a).forEach((([e,n])=>{t.functions[e]=[...n]}))})),t},f=(e,n,a,o)=>{let i=o&&a?Object.assign({},a):Object.assign({},this.data);return n?i=(0,this.data)({importedData:e,currentData:a}):i?e&&(i=((e,n)=>{const a=e;return i=n,"object"!=typeof(o=a)||Array.isArray(o)||null===o||"object"!=typeof i||Array.isArray(i)||null===i?t("Export data is object"):Object.entries(n).forEach((([e,t])=>{a.hasOwnProperty(e),a[e]=t})),a;var o,i})(i,e)):("ImportData replacing data",console.warn("ImportData replacing data"),i=e),i},g=(e,t,n)=>{const a={value:f(t,n),id:e},o=this._dynamic.data.data.values.length;return this._dynamic.data.data.values.push(a),this._dynamic.data.data.values[o]},v=(e=!1)=>{e&&p("",!0),this._dynamic.dynamicNodes.forEach(((e,t)=>{if(e.isNew)delete this._dynamic.dynamicNodes[t].isNew;else{const t=u(e.dataId);e.values.forEach((e=>{switch(e.type){case"dynamicText":const n=e.value,a=String(O(n.key,t));n.value!==a&&(e.value.value=a,e.render(a));break;case"attribute":const o=e=>O(e,t);e.render(o);break;case"class":const i=e=>O(e,t);e.render(i)}}))}})),this._dynamic.dynamicNodes=[]},T=(e,t,n,a)=>{const o=((e,t,n,a=!1,o,i)=>{const r={index:t,values:e,dataId:n};return a||(r.isNew=!0),i&&(r.el=i),void 0!==o&&(r.key=o),r})(e,t,n,!0);a&&a.nodes.push(o)},x=e=>{if(this.values){if(r(this.values)){const t={currentData:u(e)};return this.values(t)}t("Values error")}},w=e=>{if(this.values){if(r(this.values)){const t={currentData:e};return this.values(t)}t("Values error")}},O=(e,t)=>{if(e.isValue){const n=w(t);let a;return n&&(a=D(e.key,n,e.isClass)[0]),a}{const n=t[e.originKey];return e.isProperty?E(n,e.properties):n}},C=(e,n,a,i,r)=>{b(n);const s=(e,n)=>{p(n);try{v()}catch(e){this._dynamic.dynamicNodes=[],t("Error: Maximum render")}l(F,!1,a,this.functions,i,r)};if(void 0!==a){const i=this._dynamic.data.data.values.filter((e=>(null==e?void 0:e.id)===a));if(i.length>1&&t("Error: id is unique"),i&&i[0]){const t=this._dynamic.data.data.values.indexOf(i[0]);if(t>-1){const a=this._dynamic.data.data.values[t];if(o(a)&&this._dynamic.data.data.values[t].value.hasOwnProperty(n)){this._dynamic.data.data.values[t].value[n]=e,s(this._dynamic.data.data.values[t].value,n),r.forEach((e=>{const n=`${e.key}.${e.properties.join(".")}`;s(this._dynamic.data.data.values[t].value,n)})),N(t);const a=V(t).exportData;this.setExportData&&a&&Object.entries(a).forEach((([e,n])=>{this.setExportData&&this.setExportData(e,n,this.exportId,t)}))}}}}else this.data&&n&&this.data[n]&&(this.data[n]=e,s(this.data,n))},N=e=>{const n=V(e),a=n.exportObject,o=n.functions,i=null==a?void 0:a.data,r=null==a?void 0:a.constructor,s=null==a?void 0:a.indexesData,p={};i&&r&&Object.entries(i).forEach((([n,a])=>{if(null==r?void 0:r.hasOwnProperty(n)){const t=L(Object.assign({},r[n]),null==s?void 0:s[n],e,o);p[n]=t}else t("Export data render error")})),n.exportData=p},L=(e,n,a,i)=>{const r=y(e),s=e=>{const t=x(a),n=((e,t,n,a,i=!1,r)=>{let s=["",!1];return void 0?a&&(s=D(n,a)):s=((e,t,n,a=!1)=>{const i=(e=>{let t,n=!1,a=[];if(o(e)){const o=e;t=o.key,o.properties.length>0&&(n=!0,a=o.properties)}else t=e;return[t,n,a]})(b(n)),r=i[0],s=i[1],p=i[2],c=a?e:((e,t,n,a)=>{if(void 0!==t&&e){if(o(t)){const n=t;return E(e[n.key],n.properties)}return e[t]}})(e,r);return[s?E(c,p):c,s]})(e,0,n,i),s})(u(a),0,e,t);return n[0]};return Object.entries(r).forEach((([e,a])=>{"data"!==e&&"functions"!==e||Object.entries(a).forEach((([a,o])=>{Array.isArray(o)?o.forEach(((o,p)=>{if("data"===e){const t=(null==n?void 0:n[e][a])&&-1!==(null==n?void 0:n[e][a].indexOf(p));r[e][a][p]=t?s(o):o}else if(2===o.length){const n=o[1];if(i.hasOwnProperty(n)){const t=i[n],s=o[0].bind(this,t);r[e][a][p]=s}else t(`Function ${n} not found`)}else t("Data error")})):t("Data error")}))})),r},M=e=>{var t;const n=V(e),a=n.functions,o=n.exportObject,i=null==o?void 0:o.indexesData;let r,s={};const p=(e,t)=>{const n={data:{},functions:{}};Object.entries(e).forEach((([e,t])=>{"data"!==e&&"functions"!==e||Object.entries(t).forEach((([t,a])=>{n[e][t]=[...a]}))})),s.hasOwnProperty(t)?s[t]=n:s[t]={data:{},functions:{}},s[t]=n},c=null===(t=this.export)||void 0===t?void 0:t.data;if(c&&!o){const e=c;Object.entries(e).forEach((([t,n])=>{Object.entries(n).forEach((([n,a])=>{e[t][n]=[a]}))})),r=e}else if(!c&&o){const t=o.data;t?(Object.entries(t).forEach((([n,o])=>{p(Object.assign({},o),n),t[n]=L(Object.assign({},o),null==i?void 0:i[n],e,a)})),r=t):r=void 0}else if(c&&o){const t=c;Object.entries(t).forEach((([n,r])=>{o.data[n]&&(p(o.data[n],n),t[n]=((e,t)=>{const n=e;return Object.entries(t).forEach((([e,t])=>{n.data.hasOwnProperty(e)||(n.data[e]=t)})),n})(L(Object.assign({},o.data[n]),null==i?void 0:i[n],e,a),r))})),o.data&&Object.entries(o.data).forEach((([n,o])=>{t.hasOwnProperty(n)||(p(Object.assign({},o),n),t[n]=L(Object.assign({},o),null==i?void 0:i[n],e,a))})),r=t}else s=void 0,r=void 0;if(V(e).exportData=r,o&&s&&(o.constructor=s),r)if(0===e){const e={};Object.entries(r).forEach((([t,n])=>{e[t]=[n]})),this.exportObj=e}else this.exportObj&&Object.entries(r).forEach((([e,t])=>{this.exportObj&&this.exportObj.hasOwnProperty(e)&&this.exportObj[e].push(t)}));else this.exportObj=r},V=e=>{const n=this._dynamic.data.data.components.filter((t=>(null==t?void 0:t.id)===e));n.length>1&&t("id is unique");const a=this._dynamic.data.data.components.indexOf(n[0]);return this._dynamic.data.data.components[a]},S=(e,n)=>{const a=this._dynamic.data.data.values.filter((t=>(null==t?void 0:t.id)===e));return a.length>1&&t("id is unique"),void 0!==e?a&&a[0]&&a[0].value?a[0].value[n]:void 0:this.data&&this.data[n]?this.data[n]:void 0},{push:H}=Array.prototype,F=(e,n,a=!1,o,i,r)=>{const s=(e=S(o,n))=>e,p=V(i);p.functions.hasOwnProperty(e)&&a?t("Function name is unique"):p.functions[e]=(e=s)=>{C("function"==typeof e?e(S(o,n)):e,n,o,i,r)}},P=(e,t,n,a,o)=>{if(void 0!==this.script){const e=V(a),i=u(a,!0);Array.isArray(this.script)?(this.script[1].start===t||void 0===this.script[1].start&&"afterLoad"===t)&&c(i,this.script,null==e?void 0:e.functions,n,o):"afterLoad"===t&&c(i,this.script,null==e?void 0:e.functions,n,o)}var i,r;void 0!==this.attributes&&(i=e,r=this.attributes,null!=i&&r&&Object.keys(r).forEach((e=>{i.setAttribute(e,r[e])})))},R=e=>this.exportDataObjects.length>0&&this.exportDataObjects[e]?this.exportDataObjects[e]:void 0,K=(e,t)=>{const n=((e,t,n)=>({id:e,functions:{},nodes:[],exportData:void 0,import:n,exportObject:t}))(e,R(e),t);return this._dynamic.data.data.components.push(n),n},J=(e,t,n,a)=>{const o={};e.hasOwnProperty("data")&&(o.data=[]),e.hasOwnProperty("functions")&&(o.functions=[]),Object.entries(e).forEach((([e,t])=>{"data"!==e&&"functions"!==e||Object.entries(t).forEach((([t,a])=>{var i,r;if(n&&n[e]&&n[e].hasOwnProperty(t)&&n[e][t]){const a=JSON.stringify([t,Array.isArray(n[e][t])?n[e][t][0]:n[e][t]]);null===(i=o[e])||void 0===i||i.push(a)}else null===(r=o[e])||void 0===r||r.push(t)}))}));const i={};Object.entries(o).forEach((([e,t])=>{i[e]=t.join(";")}));const r={import:JSON.stringify(i),exportId:this.exportId,index:t,importIndex:a};return JSON.stringify(r)},U=(e,n,a,o)=>{const i=e;return Object.entries(i).forEach((([e,a])=>{"data"===e||"functions"===e?Object.entries(a).forEach((([t,a])=>{var r,s;const p=i[e][t].length;(null===(r=n[e])||void 0===r?void 0:r.hasOwnProperty(t))?(i[e][t].push(null===(s=n[e])||void 0===s?void 0:s[t]),o&&(o[e][t]=p)):(i[e][t].push(void 0),o&&"data"===e&&(o[e][t]=[p]))})):t("Template data contains data or functions properties")})),Object.entries(n).forEach((([e,n])=>{"data"===e||"functions"===e?Object.entries(n).forEach((([t,n])=>{i[e].hasOwnProperty(t)||(i[e][t]=[n],o&&(o[e][t]=0))})):t("Template data contains data or functions properties")})),i},G=(e,n,a,o)=>{if(n.hasOwnProperty(e)){const t=n;return t[e]=U(n[e],a,e,o),t}{const i=n;return i[e]={data:{},functions:{}},Object.entries(a).forEach((([n,a])=>{"data"===n||"functions"===n?Object.entries(a).forEach((([t,a])=>{i[e][n][t]=[a],o[n][t]=0})):t("Template data contains data or functions properties")})),i}},q=(e,n,a)=>{const o=e;return o.hasOwnProperty(n)?Object.entries(a).forEach((([e,a])=>{"data"===e||"functions"===e?Object.entries(a).forEach((([t,a])=>{o[n][e][t]?o[n][e][t].push(a):o[n][e][t]=[a]})):t("Template data contains data or functions properties")})):(o[n]={data:{},functions:{}},Object.entries(a).forEach((([e,a])=>{"data"===e||"functions"===e?Object.entries(a).forEach((([t,a])=>{o[n][e][t]=[a]})):t("Template data contains data or functions properties")}))),o},$=(e,t,n,a)=>{let o={},i={};t&&n&&a&&(o=G(t,Object.assign({},o),n,a),i=q(i,t,a));const r={data:o,index:e,indexesData:i,constructor:{}};this.exportDataObjects.push(r)},B=e=>{const n={};return Object.entries(e).forEach((([a,o])=>{"data"===a?(n.data||(n.data={}),n.data=i(e.data)):"functions"===a?(n.functions||(n.functions={}),Object.entries(o).forEach((([e,t])=>{n.functions[e]=[...t]}))):t("Template data contains data or functions properties")})),n},z=(e,n,a)=>{if(this.export){const t=B(this.export[e]),o=R(n),i={data:{},functions:{}};let r;if(o){const e=G(a,o.data,t,i),s=R(n);s.data=e,r=null==s?void 0:s.index}else $(n,a,t,i),r=n;if(o){const e=o.indexesData,t=q(e,a,i);o.indexesData=t}const s=Object.assign({},t);return J(s,n,i,r)}t("TemplateExport is required")},X=Node.prototype.cloneNode,W=(e,n,a,i,s)=>{var p;if(i&&i.el){const c=X.call(i.el,!0);let d=[...i.nodes];const h=i.values.map((e=>Object.assign(Object.assign({},e),{value:r(e.value)?e.value:Object.assign({},e.value)})));let u=-1;function y(e){if(u++,d.includes(u)&&(d=d.map((t=>t===u?e:t))),e.nodeType===Node.ELEMENT_NODE)for(let t=e.firstChild;t&&d.some((e=>"number"==typeof e));t=t.nextSibling)y(t)}y(c);const f=null===(p=Object.getOwnPropertyDescriptor(CharacterData.prototype,"data"))||void 0===p?void 0:p.set,b=e=>O(e,n),g=[];h.some((e=>"import"===e.type))||this.export&&$(e);const v=[];let x;return h.forEach((a=>{var i;const r=d[a.id];switch(a.type){case"dynamicText":const s=a.value;v.push({key:s.key.originKey,properties:null!==(i=s.key.properties)&&void 0!==i?i:[]});const p=String(O(s.key,n)),c=s.texts.map(((e,t)=>{const n=d[e];return null==f||f.call(n,p),n}));g.push({render:(e=void 0)=>((e,t)=>{t.forEach(((n,a)=>{n?n.textContent=e:t.splice(a,1)}))})(e,c),type:"dynamicText",value:{key:s.key,value:p}});break;case"attribute":const l=a.value,h=(e,t)=>((e,t,n,a)=>{if(e&&n)if(Array.isArray(t.value)){const a=[...t.value],o=a[0].replace(_,((e,t)=>{const o=n({originKey:t,key:t,isValue:a[1]});return String(o)}));t.oldValue!==o&&(t.oldValue=o,j.call(e,t.name,o))}else{const o=t.value.replace(_,((e,o)=>{var i;const r=t.keys[o],s=n(r);return a&&a.push({key:r.originKey,properties:null!==(i=r.properties)&&void 0!==i?i:[]}),String(s)}));t.oldValue!==o&&(t.oldValue=o,j.call(e,t.name,o))}})(r,l,e,t);h(b,v),g.push({render:h,type:"attribute",value:l});break;case"import":const u=a.value,y=r.getAttribute("data-cample"),T=u.value;if(T&&y){const t=z(T,e,y);m(r,void 0,t)}else t("Render export error");break;case"class":const x=a.value,w=e=>((e,t,n)=>{if(e&&n){let{oldClassList:a,classList:i}=t;const r=e.classList;let s={};i.forEach((e=>{if(o(e)){let t=n(e);if(e.isValue)for(const e in t)e in s||(s[e]=null),e in a||A.call(r,e);else{const e=t.trim().replace(/\s+/g," ").split(" ");for(const t in e)e[t]in s||(s[e[t]]=null),e[t]in a||A.call(r,e[t])}}else{const t=e;t in s||(s[t]=null),t in a||A.call(r,t)}}));for(const e in a)e in s||I.call(r,e);t.oldClassList=s}})(r,x,e);w(b),H.call(g,{render:w,type:"class",value:x})}})),c?(x=K(e,s),l(F,!0,this._dynamic.data.data.currentId,this.functions,e,v.filter(((e,t,n)=>n.findIndex((t=>JSON.stringify(t)===JSON.stringify(e)))===t))),this._dynamic.data.data.currentId+=1):l(F,!0,void 0,this.functions,e,[]),T(g,e,a,x),c}return null},Q=(e,n,a)=>{const o=u(e,!1),i=f(n,a,null==o?void 0:o.value,!0);o||t("Render error");const r=this._dynamic.data.data.values.indexOf(o);this._dynamic.data.data.values[r].value=i},Y=(e,n,a)=>{Q(e,n,a);try{v(!0)}catch(e){t(`${e}`)}},Z=e&&void 0===this.trimHTML||this.trimHTML;"dynamic"===s?this._dynamic.data.data.components.forEach((e=>{const a=e.id;void 0===a&&t("Index error");const o=e.import,i=void 0!==(null==o?void 0:o.importIndex)?o.importIndex:0,s=h(null,n,o,i),p=this.data&&r(this.data);Y(a,s,p)})):document.querySelectorAll(`template[data-cample=${this.selector}]`).forEach(((e,i)=>{var s;const p=m(e,this.import);this.importId=((e,t)=>{if(e){if(e.hasAttribute("data-cample-import")){let n=e.getAttribute("data-cample-import");if(n){n=n.replace(/\s+/g,"");const e=JSON.parse(n);return e&&e.exportId?e.exportId:t}return t}if(t)return t}return 0})(e,a);const c=h(e,n),l=this.data&&r(this.data);P(e,"beforeLoad",c,i);const u=[],y=(f=this.script)&&Array.isArray(f)&&f[1]&&o(f[1])&&f[1].elements?f[1].elements:void 0;var f;u.push(((e,t)=>P(e,"afterLoad",c,i,t)));const b=this._dynamic.data.data.currentId,v=null===(s=g(b,c,l))||void 0===s?void 0:s.value,T=k(this.template,i,b,Z);((e,n,a,o,i)=>{if(e instanceof HTMLTemplateElement){const r=e.content;n&&r&&d.call(e.content,n);const s=e.parentNode;if(r.childNodes.length>0){if(s)if(1===r.childNodes.length)if(r.childNodes[0].nodeType===Node.ELEMENT_NODE&&r.firstElementChild){let t={};"component"===o&&i&&(t=((e,t)=>{const n={};return e&&Object.entries(e).forEach((([e,a])=>{n[e]=t.querySelector(a)})),n})(i,r)),s.insertBefore(r.firstElementChild,e);const n=e.previousElementSibling;s.removeChild(e),a.forEach(((e,a)=>0===a&&"each"===o?e(null==n?void 0:n.parentNode):0===a&&"component"===o?e(n,t):e(n)))}else t("Component include only one node with type 'Element'");else if("each"===o){if(s)try{for(;r.firstChild;)s.insertBefore(r.firstChild,e);s.removeChild(e)}catch(e){t(`${e}`)}else t("Each Element error");a.length&&("each"!==o?a[0](null):a.forEach(((e,t)=>e(0===t?s:null))))}else t("Component include only one node with type 'Element'")}else switch(s&&"each"!==o&&s.removeChild(e),o){case"component":a[0](null);break;case"each":const t=e.previousSibling,n=e.nextSibling;s&&s.removeChild(e),a.forEach(((e,a)=>{0===a?e(s,t,n):e(null)}))}}else t("Element instanceof HTMLTemplateElement")})(e,W(i,v,b,T,p),u,"component",y),M(i)}))}}}var C=n(370),N=n.n(C),L=new URL(n(631),n.b);const M=new O("header-component",'<header id="header"> <div class="block"> <div class="header_block"> <div class="logo"> <a href="/"> <img class="logo_image" src="'+N()(L)+'" alt="logo"/> </a> </div> <ul class="menu"> <li class="menu_item"><a class="menu_link" href="/">Main page</a></li> <li class="menu_item"> <a class="menu_link" href="../documentation/introduction.html">Documentation</a> </li> <li class="menu_item"> <a class="menu_link" href="../examples.html">Examples</a> </li> <li class="menu_item"> <a class="github_link" target="_blank" href="https://github.com/Camplejs/Cample.js"> <svg height="32" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="32" data-view-component="true" alt="github"> <path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path> </svg> </a> </li> </ul> </div> </div> </header> ',{}),V=new O("footer-component",'<footer id="footer"> <div class="block"> <div class="links"> <a href="https://github.com/Camplejs/Cample.js" target="_blank" rel="noopener noreferrer">GitHub repository</a><br> <a href="https://www.npmjs.com/package/cample" target="_blank" rel="noopener noreferrer">NPM package</a> </div> <div class="year_and_description">Copyright © Made using the <a href="https://www.npmjs.com/package/cample" target="_blank" rel="noopener noreferrer">Cample.js</a> framework. 2022-{{year}}</div> </div> </footer>',{data:()=>({year:(new Date).getFullYear()})});var S=new URL(n(741),n.b),H=new URL(n(137),n.b),F=new URL(n(986),n.b),P=new URL(n(559),n.b),R=new URL(n(291),n.b);const K=new O("content-component",'<div id="main_content"> <div id="introduction"> <div class="block"> <h1 class="title"> Cample.js - just a fast javascript framework. </h1> <p class="subtitle"> <a href="/documentation/reactivity.html">Reactivity without Virtual DOM!</a> </p> <div class="buttons"> <template data-cample-import="{{{buttonData1}}}" data-cample="button-component"></template> <template data-cample-import="{{{buttonData2}}}" data-cample="button-component"></template> </div> </div> </div> <div class="block"> <h2>Reactivity:</h2> <p class="codepen" data-height="300" data-theme-id="light" data-default-tab="js,result" data-slug-hash="rNrVjmp" data-editable="true" data-user="Camplejs" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em"> <span>See the Pen <a href="https://codepen.io/Camplejs/pen/rNrVjmp"> Reactivity</a> by Cample.js (<a href="https://codepen.io/Camplejs">@Camplejs</a>) on <a href="https://codepen.io">CodePen</a>.</span> </p> </div> <div id="Data"> <div class="block"> <h4 class="theme">Import and Export data:</h4> <h2 class="title">Cample.js is good for working with data</h2> <div class="main_content"> <img class="component-img" src="'+N()(S)+'" alt="component1"/> <span>To</span> <img class="component-img" src="'+N()(H)+'" alt="component1"/> </div> <p class="description"> Thanks to the convenient data export between components,<br/> you can transfer not only text, but also functions, objects, etc. </p> </div> </div> <div id="RoutesandComponents"> <div class="block"> <div> <p class="theme">Component</p> <h2>Cample.js support component approach</h2> <p> The core framework is components. Using these technological entity, a huge number of different types of sites are created, such as landing pages, business card site, etc. </p> <template data-cample-import="{{{buttonData3}}}" data-cample="button-component"></template> </div> <div> <img class="code" src="'+N()(F)+'" alt=""/> </div> </div> </div> <div id="TypesandTests"> <div class="block"> <h4 class="theme">Types:</h4> <h2 class="title">Cample.js typed</h2> <div class="main_content"> <div> <h2>Types:</h2> <p> Cample.js is a typed framework. This makes the development process more productive. </p> <img src="'+N()(P)+'" alt="typescript"/> </div> </div> </div> </div> <div id="TryCample"> <div class="block"> <div> <img class="cample_image" src="'+N()(R)+'" alt="cample.js"/> </div> <div class="TryCample"> <h2>Try Cample.js</h2> <p>Framework is available in the node package manager.</p> <div> <code> npm i cample </code> </div> </div> </div> </div> </div> ',{data:()=>({button1:"Introduction",button2:"Examples",button3:"Component",link1:"/documentation/introduction.html",link2:"/examples.html",link3:"/component.html"}),export:{buttonData1:{data:{text:"button1",link:"link1"}},buttonData2:{data:{text:"button2",link:"link2"}},buttonData3:{data:{text:"button3",link:"link3"}}},exportId:"contentId"}),J=new O("documentation-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Documentation</h1> <hr class="section_line"> <h2>About:</h2> <p>Cample.js framework documentation.</p> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/introduction.html">Introduction</a> </li> <li class="list_item"> <a href="/documentation/installation.html">Installation</a> </li> <li class="list_item"> <a href="/documentation/getting-started.html">Getting started</a> </li> </ul> </div> </div> '),U=new O("examples-component",'<div id="examples_main"> <template data-cample="sidebar-component"></template> <div class="example_page"> <p class="codepen" data-height="700px" data-theme-id="light" data-default-tab="js,result" data-slug-hash="WNgOGVb" data-editable="true" data-user="Camplejs" style="height:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em"> <span>See the Pen <a href="https://codepen.io/Camplejs/pen/WNgOGVb"> Example Cample.js</a> by Cample.js (<a href="https://codepen.io/Camplejs">@Camplejs</a>) on <a href="https://codepen.io">CodePen</a>.</span> </p> </div> </div> ');var G=new URL(n(525),n.b);const q=new O("sidebar-component",'<div> <aside id="sidebar"> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/introduction.html">Introduction</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/installation.html">Installation</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/getting-started.html">Getting started</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/cample.html">Cample</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/component.html">Component</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/each.html">Each</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/reactivity.html">Reactivity</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/types.html">Types</a> </section> </aside> <aside id="sidebar_mobile"> <div id="close"></div> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/introduction.html">Introduction</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/installation.html">Installation</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/getting-started.html">Getting started</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/cample.html">Cample</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/component.html">Component</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/each.html">Each</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/reactivity.html">Reactivity</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/documentation/types.html">Types</a> </section> </aside> <div id="sidebar_button" class="active_button"> <img src="'+N()(G)+'" alt="sidebar"/> </div> </div> ',{script:[e=>{let{elements:t}=e;t.btn&&(t.btn.addEventListener("click",(()=>{t.btn.classList.contains("active_button")?(t.btn.classList.remove("active_button"),t.sidebar_mobile.classList.add("active_sidebar")):(t.btn.classList.add("active_button"),t.sidebar_mobile.classList.remove("active_sidebar"))})),t.close.addEventListener("click",(()=>{t.btn.classList.add("active_button"),t.sidebar_mobile.classList.remove("active_sidebar")})))},{start:"afterLoad",elements:{btn:"#sidebar_button",sidebar_mobile:"#sidebar_mobile",close:"#close"}}],attributes:{id:"sidebar-component"}});var $=new URL(n(525),n.b);const B=new O("sidebar-component",'<div> <aside id="sidebar"> <section class="sidebar_section"> <a class="sidebar_link" href="/examples.html">Main</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/examples/clicker.html">Clicker</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/examples/taskTracker.html">Task Tracker</a> </section> </aside> <aside id="sidebar_mobile"> <div id="close"></div> <section class="sidebar_section"> <a class="sidebar_link" href="/examples.html">Main</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/examples/clicker.html">Clicker</a> </section> <section class="sidebar_section"> <a class="sidebar_link" href="/examples/taskTracker.html">Task Tracker</a> </section> </aside> <div id="sidebar_button" class="active_button"> <img src="'+N()($)+'" alt="sidebar"/> </div> </div> ',{script:[e=>{let{elements:t}=e;t.btn&&(t.btn.addEventListener("click",(()=>{t.btn.classList.contains("active_button")?(t.btn.classList.remove("active_button"),t.sidebar_mobile.classList.add("active_sidebar")):(t.btn.classList.add("active_button"),t.sidebar_mobile.classList.remove("active_sidebar"))})),t.close.addEventListener("click",(()=>{t.btn.classList.add("active_button"),t.sidebar_mobile.classList.remove("active_sidebar")})))},{start:"afterLoad",elements:{btn:"#sidebar_button",sidebar_mobile:"#sidebar_mobile",close:"#close"}}],attributes:{id:"sidebar-component"}}),z=new O("installation-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Installation:</h1> <hr class="section_line"> <p>To use npm, needs to install <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node.js</a>.</p> <p>Install via <a href="https://www.npmjs.com/package/cample" target="_blank" rel="noopener noreferrer">NPM</a>:</p> <code> npm i cample </code> <p>Installing via npm is currently the default. The framework can work with most modern bundlers.</p> </div> </div>'),X=new O("cample-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Cample:</h1> <hr class="section_line"> <h2>About:</h2> <p>The Cample object is the starting point for the framework. A new instance of the object is initialized in an HTML block, renders the components.</p> <h2>Class function:</h2> <pre><code>const newCample = cample("#page",{\n  trimHTML:false\n});</code></pre> <h2>Render method:</h2> <p>In cample.js, rendering is done by creating a template, which contains the "data-cample" key attribute. This attribute is passed the value of the selector that was specified when the component was created. The selector in the component always comes as the first parameter. Render example:</p> <h3>before render:</h3> <pre><code>&lt;template data-cample="new-component"&gt;&lt;/template&gt;</code></pre> <h3>after render:</h3> <pre><code>&lt;div&gt;text&lt;div&gt;</code></pre> <h3>component:</h3> <pre><code>const newComponent = component("new-component", "&lt;div&gt;text&lt;div&gt;");</code></pre> <p>If there was no "template" in the document that would contain the required "data-cample", then the component will not be rendered.</p> <h2>Arguments:</h2> <h3>selector:</h3> <p>The HTML block in which the page will be rendered is initialized mainly due to the selector argument, which receives the value of the specified block. An example of a selector:</p> <h4>JavaScript file:</h4> <pre><code>new Cample("#page",{\n    trimHTML:false\n})\n.render("&lt;span&gt;text/&lt;span&gt;",{})</code></pre> <h4>HTML file:</h4> <pre><code>&lt;main id="page"&gt;\n    text\n&lt;main&gt;</code></pre> <p>In this example, for the "main" HTML tag with a unique identifier "page", the text that was received in the "render" method is rendered.</p> <h3>options:</h3> <p>The options object describes the property for applying the trim method to the rendered HTML.</p> <h4>trimHTML:</h4> <p>Depending on the value of the trimHTML property, the javascript trim() method is applied to the HTML string.</p> <pre><code>new Cample("#page",{\n  trimHTML:false\n})</code></pre> <p>This will avoid the errors associated with rendering a single Element in the component, but also the HTML may not be displayed correctly.</p> <h2>Methods:</h2> <p>The Cample object has one function render.</p> <h3>render:</h3> <p>The render function renders components such as <a href="/documentation/component.html">Component</a>, <a href="/documentation/each.html">Each</a>, etc. The function\'s arguments are template and options. Template is HTML markup with string interpolation, and options is an object of components processed by the render function. An example of arguments in a function:</p> <pre><code>(`&lt;div&gt;\n    &lbrace; &lbrace;component&rbrace; &rbrace;\n&lt;/div&gt;`,{\n    component:newComponent\n})</code></pre> <p>In this example, for the variable newComponent (let\'s say that stores the component <a href="/documentation/component.html">Component</a>), in the options object, the name component is given, which can be processed using interpolation in the template.</p> <h2>Example code:</h2> <pre><code>const newCample = new Cample("#page",{\n  trimHTML:false,\n});\nconst newComponent\n= component("new-component", "HTML");  \n\nnewCample.render("&lbrace; &lbrace;newComponent&rbrace; &rbrace;", {newComponent});</code></pre> <h2>Cample table:</h2> <table> <thead> <tr> <th colspan="3">Arguments:</th> </tr> <tr> <th>Name</th> <th>Usage</th> <th>Type</th> </tr> </thead> <tbody> <tr> <td>selector</td> <td>HTML selector, where components are rendered.</td> <td>SelectorType</td> </tr> <tr> <td>options</td> <td>Object options.</td> <td>CampleOptionsType</td> </tr> </tbody> <thead> <tr> <th colspan="3">Methods:</th> </tr> <tr> <th>Name</th> <th>Usage</th> <th>Returns</th> </tr> </thead> <tbody> <tr> <td>render</td> <td>Renders components such as a <a href="/documentation/component.html">Component</a>, for example.</td> <td>void</td> </tr> </tbody> </table> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/component.html">Component</a> </li> <li class="list_item"> <a href="/documentation/each.html">Each</a> </li> </ul> </div> </div> '),W=new O("component-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Component:</h1> <hr class="section_line"> <h2>About:</h2> <p>Component - the main concept of the framework. Almost the entire structure built using the framework is based on a component approach.</p> <p>The Component itself is a specific fragment of the site, be it a button, a list, or a text block, etc.</p> <h2>Class function:</h2> <pre><code>const newComponent = component("new-component", "HTML");</code></pre> <h2>Arguments:</h2> <p>The Component includes three arguments, the first of which is the value of the "data-cample" attribute (selector), the second is an HTML template containing string interpolation, and the third is a settings object.</p> <h3>selector:</h3> <p>The selector is the value of the "data-cample" attribute of the template in which the component will be rendered. For example, if the selector is set to "new-selector", then the HTML "template" into which the component will be rendered will look like this:</p> <pre><code>&lt;template data-cample="new-selector"&gt;&lt;/template&gt;</code></pre> <p>It is worth noting that there can be as many "template" tags on a site as you like (within the memory of the machine where the site is located). That is, if there are 100 "templates" with the "new-component" attribute, then 100 components will be rendered.</p> <h3>template:</h3> <p>A template is essentially a string that will be rendered in the "template" with attribute "data-cample". This string provides for string interpolation, which means replacing the content in double curly braces with the template corresponding to it in javascript HTML. An example of a template with string interpolation:</p> <pre><code>("new-component", \n`&lt;div class="component"&gt;\n    &lbrace; &lbrace;component_text&rbrace; &rbrace;\n&lt;/div&gt;`,\n{\n    data:()=>{\n        return {\n            component_text:"Text"\n        }\n    }\n})</code></pre> <p>Usually, the values for string interpolation in a template are located in the options object, and more specifically in the data function. Options object will be discussed in the next paragraph.</p> <h3>options:</h3> <p>The options object describes the scripts, attributes, data, styles of the component, etc. Each of the listed properties describes a property of an object.</p> <h4>script:</h4> <p>Either an array with two values is passed to the property of the script object, the first of which is a function that takes the values of the elements described in the settings, as well as the dynamic data and imported data functions and is triggered when the function can be loaded or not loaded yet, and the second of which is a script settings object that takes two arguments: "start" and "elements", or a function of the first array argument. The first argument to "start" takes three values: "beforeLoad", "afterLoad", and undefined. This argument describes when the script function should be executed before loading the component or after. If no values are defined, the function will be loaded after. The second argument is the elements object. The object has the following form, where each key:value pair is: "element name: HTML element selector". An example of a script:</p> <pre><code>{\n    script: [\n        ({ elements, functions, currentData, importedData }) => {\n        elements.component.addEventListener("click", () => {\n            console.log(elements.component);\n        });\n        const updateFunction = (e) => {\n            functions?.updateText((data) => {\n                return "newText";\n            });\n        };\n        document.addEventListener("onload", updateFunction);\n            console.log(data);\n        },\n        {\n            start: "afterLoad",\n            elements: { component: ".component" },\n        },\n    ],\n    data: () => {\n        return {\n            dynamicText: "Text",\n        };\n    },\n    functions: {\n        updateText: "dynamicText",\n    },\n}</code></pre> <p>Also, the framework supports a script without an array. That is, a function can also be passed to a value.</p> <pre><code>{\n    script:({ elements, functions, currentData, importedData })=>{\n        console.log("123");\n    }\n}</code></pre> <p>The object passed in the array will also be passed to the function arguments.</p> <h4>attributes:</h4> <p>The attributes property contains an object of the HTML attributes and their values that will be processed in the HTML "template". An example of the attributes:</p> <pre><code>("new-component", \n`text`,\n{\n    attributes:{\n        id:"id"\n    }\n})</code></pre> <p>In this example, the component with the "new-component" selector will be assigned an "id" attribute with the value id.</p> <h4>data:</h4> <p>The data property contains a function that returns an object with properties that are processed in the template using string interpolation. These properties accept values with any data type. The function takes an object with imported data as arguments.</p> <pre><code>("new-component", \n`&lt;div class="component"&gt;\n    &lbrace; &lbrace;component_text&rbrace; &rbrace;\n    &lbrace; &lbrace;component_array_texts&rbrace; &rbrace;\n    &lbrace; &lbrace;dynamicData.value&rbrace; &rbrace;\n&lt;/div&gt;`,\n  {\n    data: ({ importedData }) => {\n      return {\n        component_text: "ComponentText",\n        component_array_texts: ["Text"],\n        dynamicData: {\n            value:"Data"\n        },\n      };\n    },\n  };\n);</code></pre> <p>All values are passed through the String() function before being assigned. Also, if the value is an object, then its properties can be accessed through a dot, as is done in vanilla js.</p> <h4>functions:</h4> <p>The functions property is intended for creating data update functions. That is, this property accepts an object of type "function name": "the first data keyword without dots".</p> <pre><code>{\n    data: () => {\n        return {\n            component_text: "ComponentText",\n        };\n    },\n    functions:{\n        setComponentText:"component_text"\n    }\n}</code></pre> <p>These functions are passed in the function arguments in the script property. More specifically, in the object in the property "functions".</p> <h4>import:</h4> <p>The import property sets the "data-cample-import" attribute. This attribute specifies data to import specific exported data. An example of the import:</p> <pre><code>import:{\n    value:["text"],\n    exportId:"textId"\n}</code></pre> <p>For example, if a component was given import data in other components, then the import object will overwrite them in the tag attribute.</p> <h5>value:</h5> <p>The value property on the import object specifies a list of exported values that will be imported into the component. An example of the value:</p> <pre><code>{\n    value:["text", "text1"]\n}</code></pre> <p>In this example, two values are passed to the "data-cample-import" property: "text" and "text1".</p> <h5>exportId:</h5> <p>In order to understand which component to import data from, the import object provides such a property as exportId. This property is set in the component that exports the data. It is set either in the options object. An example of the exportId:</p> <pre><code>{\n    exportId:"textId"\n}</code></pre> <p>In this example, the data will be imported from a component that will have its exportId set to "textId".</p> <h4>export:</h4> <p>Thanks to the export property, you can send data and functions from the component. The value for this property is an object with properties that take the value of an object consisting of two properties - "data" and "functions". The data object contains the data from the "data" property, the functions object contains the data from the "functions" property.</p> <pre><code>{\n    data: ({ importedData }) => {\n        return {\n            component_text: "Text",\n        };\n    },\n    functions: {\n        updateText: "component_text",\n    },\n    export: {\n        dataToExport: {\n            data: {\n                text: "component_text",\n            },\n            functions: {\n                setText: [\n                    (setData) => (txt) => {\n                        setData(() => txt);\n                    },\n                    "updateText",\n                ],\n            },\n        },\n    }\n}</code></pre> <p>The data property of the "dataToExport" object specifies the name of the data from the properties of the "data" object and gives them a new key for export, the "functions" property in the same object specifies an array, the first parameter of which is a function with a closure, and the second is the name of the exported function from "functions" object. In the first array parameter, the argument of the first function is the data update function that was specified in the second array parameter. The argument of the second function is the data that changes.</p> <p>In order to export data to a specific component, in addition to exportId, needed to "pass an object" to the value of the "data-cample-import" attribute of the desired component.</p> <pre><code>\n`&lt;div class="component"&gt;\n    &lt;template data-cample-import="{ { {dataToExport} } }"\n    data-cample="another-component"&gt;&lt;/template&gt;\n&lt;/div&gt;`</code></pre> <p>The property for the imported object can be different, in this example the property is the "dataToExport" property.</p> <h4>exportId:</h4> <p>The exportId property specifies the export identifier, by which the component will "determine" where to get the data from. An example of the exportId:</p> <pre><code>{\n    exportId:"textId"\n}</code></pre> <p>In this example, to export specific data, "exportId" is set with the value "textId".</p> <h4>style:</h4> <p>The style property contains a string that is inserted into the HTML style tag. This string is the stylesheet syntax, i.e. cascading style sheets syntax. An example of a style:</p> <pre><code>("new-component", \n`&lt;div class="component"&gt;\n    Text\n&lt;/div&gt;`,\n{\n    style:`\n        .component{\n            width:100px;\n            height:100px;\n        }\n    `\n});</code></pre> <p>Component styles are rendered in the style tag, thus it is possible to create styles in one component for another.</p> <h4>values:</h4> <p>The values property receives a function that takes an object with the current data. This function returns an object in which each property gets a boolean value. If the value is true, then the value of the associated property will be added to the template. If false, then just "" will be added. The values property is needed to create a dynamic string that depends on the data.</p> <pre><code>values: ({ currentData }) => {\n    return {\n        selectedValue: {\n            selected:currentData.select === true,\n        },\n    };\n}</code></pre> <p>In this example, if the "select" property of the current data is true, then the line "selected" will be output in the interpolation of strings, if false, then the string "" will be output.</p> <h5>HTML before:</h5> <pre><code>&lt;div class={ { [selectedValue] } }&gt;\n    { { [selectedValue] } }\n&lt;/div&gt;</code></pre> <h5>HTML after:</h5> <pre><code>&lt;div class="selected"&gt;\n    selected\n&lt;/div&gt;</code></pre> <p>Also, it\'s worth noting that in string interpolation, values are "passed as an array". The key to the dynamic string in this example is the "selectedValue" value.</p> <h4>trimHTML:</h4> <p>Depending on the value of the trimHTML property, the javascript trim() method is applied to the HTML string.</p> <pre><code>{\n  trimHTML:false\n}</code></pre> <p>This will avoid the errors associated with rendering a single Element in the component, but also the HTML may not be displayed correctly.</p> <h2>Example code:</h2> <pre><code>new Component(\n"new-component",\n`&lt;div class="{{[selected]}} component"&gt;\n    &lbrace; &lbrace;component_text&rbrace; &rbrace;\n    &lbrace; &lbrace;dynamicData&rbrace; &rbrace;\n    &lt;template data-cample-import="{ { {exportData} } }"\n    data-cample="another-component"&gt;&lt;/template&gt;\n&lt;/div&gt;`,\n{\n    script: [\n    ({ elements, functions }) => {\n        console.log(elements.component);\n        const updateFunction = (e) => {\n        functions?.updateText((data) => {\n            return "newText";\n        });\n        };\n        document.addEventListener("onload", updateFunction);\n    },\n    {\n        start: "afterLoad",\n        elements: [{ component: ".component" }],\n    },\n    ],\n    attributes: {\n        id: "id",\n    },\n    data: ({ importedData }) => {\n        return {\n            component_text: "Text",\n        };\n    },\n    style: `\n        .component{\n            width:100px;\n            height:100px;\n        }\n    `,\n    functions: {\n        updateText: "component_text",\n    },\n    export: {\n        exportData: {\n            data: {\n                text: "component_text",\n            },\n            functions: {\n                setText: [\n                    (setData) => (txt) => {\n                        setData(() => txt);\n                    },\n                    "updateText",\n                ],\n            },\n        },\n    },\n    values: () => {\n        return {\n            selected: {\n                selected: true\n            },\n        };\n    },\n    exportId: "textId",\n    import: {\n        value: ["text1"],\n        exportId: "textId1",\n    },\n    trimHTML: false,\n}\n);</code></pre> <h2>Component table:</h2> <table> <thead> <tr> <th colspan="3">Arguments:</th> </tr> <tr> <th>Name</th> <th>Usage</th> <th>Type</th> </tr> </thead> <tbody> <tr> <td>selector</td> <td>The value of the "data-cample" property of the template tag into which the component will be rendered.</td> <td>SelectorType</td> </tr> <tr> <td>template</td> <td>HTML rendering template including string interpolation.</td> <td>string</td> </tr> <tr> <td>options</td> <td>Object options.</td> <td>ComponentOptionsType | undefined</td> </tr> </tbody> </table> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/cample.html">Cample</a> </li> </ul> </div> </div>');var Q=new URL(n(310),n.b);const Y=new O("introduction-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Introduction:</h1> <hr class="section_line"> <h2>About:</h2> <div class="image_block"> <img class="image_logo" src="'+N()(Q)+'" alt="cample logo"> </div> <p> Cample.js - typed javascript web framework for creating site UI. </p> <p>Cample.js is an actively developed and maintained framework that supports many modern technology solutions for creating a website. The component-based approach, as well as reactivity without a virtual DOM and data export and import, will make building a site much faster than if the site was developed using js alone. Moreover, the framework is new and you can try it as something new when creating a website.</p> <p>This framework has been in development for more than 1 year!</p> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/installation.html">Installation</a> </li> <li class="list_item"> <a href="/documentation/getting-started.html">Getting started</a> </li> </ul> </div> </div> '),Z=new O("types-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Types:</h1> <hr class="section_line"> <h2>About:</h2> <p>Types (types.d.ts) in a Cample.js.</p> <pre>\n        <code>type OptionsType = {\n  [key: string]: any;\n};\n\ntype CampleOptionsType = {\n  replaceTags?: boolean;\n  trimHTML?: boolean;\n};\n\ntype ImportType = Array&lt;string&gt;;\n\ntype BindType = Array&lt;string&gt;;\n\ntype TemplateType = string | undefined;\n\ntype IndexType = number;\n\ntype ImportObjectType = {\n  value: ImportType;\n  exportId?: ExportIdType;\n  isDynamic?: boolean;\n  importIndex?: IndexType;\n};\n\ntype ComponentType =\n  | string\n  | {\n      selector: string;\n      import?: ImportType | ImportObjectType;\n      bind?: BindType;\n    }\n  | undefined;\n\ntype ComponentsType = Array&lt;ComponentType&gt;;\n\ntype ImportObjectStringType = {\n  import: string;\n  exportId: ExportIdType | undefined;\n  index: IndexType;\n  importIndex?: IndexType;\n};\n\ntype ComponentsTernaryType = [ComponentType, ComponentType];\n\ntype ConditionType = boolean | undefined;\n\ntype SelectorType = string | undefined;\n\ntype StyleType = string | undefined;\n\ntype LengthType = number;\n\ntype RenderType = "default" | "dynamic";\n\ntype UpdatingSetType = Map&lt;any, any&gt;;\n\ntype FunctionsArray = Array&lt;any&gt;;\n\ntype RenderComponentType =\n  | "cycle"\n  | "component"\n  | "animation"\n  | "ternary"\n  | "addition"\n  | "if"\n  | "each";\n\ntype AttributesType = {\n  [key: string]: string;\n};\n\ntype DataAttributeType = {\n  selector: string;\n  value: string | undefined;\n};\n\ntype EachDataObjectType = {\n  [key: string]: any;\n};\ntype EachTemplateArgumentType = {\n  [key: string]: any;\n};\ntype EachTemplateFunction = (\n  argument?: EachTemplateArgumentType,\n  index?: number\n) =&gt; string;\n\ntype EachDataValueType = EachDataObjectType | Array&lt;any&gt;;\n\ntype EachDataFunctionType = (\n  argument?: DataFunctionArgumentsType\n) =&gt; EachDataValueType;\n\ntype DataAttributesArrayType = Array&lt;DataAttributeType&gt;;\n\ntype AttrValueType = {\n  [key: string]: any;\n};\n\ntype AttributesValType = {\n  name: string;\n  value: string | [string, boolean];\n  keys: {\n    [key: string]: CurrentKeyType;\n  };\n  oldValue?: string;\n};\ntype AttributesValObjType = {\n  id: IdType;\n  attrs: AttributesValType;\n};\ntype DynamicEl = Element | undefined;\ntype DynamicEls = Array&lt;Element&gt;;\ntype DynamicElement = {\n  el: DynamicEl;\n  els: DynamicEls;\n};\n\ntype DynamicTextType = {\n  key: CurrentKeyType;\n  isProperty?: boolean;\n  texts: Array&lt;Text | number&gt;;\n};\n\ntype DynamicTextArrayType = Array&lt;DynamicTextType&gt;;\n\ntype TextArrayType = Array&lt;Text&gt;;\n\ntype DynamicFunctionsType = {\n  [key: string]: (attribute?: any) =&gt; void;\n};\n\ntype DataComponentType = DataType | DataFunctionType | undefined;\n\ntype DynamicDataValueType = DataComponentType | EachDataValueType;\n\ntype DynamicDataType = {\n  value: DynamicDataValueType;\n  oldValue?: DynamicDataValueType;\n  importData?: ImportDataType;\n  id: number;\n};\ntype ElementIndexType = {\n  id: number;\n  path: Array&lt;number&gt;;\n};\ntype FunctionEventType = (...args: any[]) =&gt; any;\ntype FunctionsEventsType = Array&lt;FunctionEventType&gt;;\ntype EventType = {\n  id: IdType;\n  events: FunctionsEventsType;\n};\n\ntype EventsType = Array&lt;EventType&gt;;\n\ntype CampleImportType = {\n  value: string;\n};\n\ntype ValueItemType = string | CurrentKeyType;\n\ntype ObjClassListType = {\n  [key: string]: any;\n};\n\ntype ValueItemsType = Array&lt;ValueItemType&gt;;\n\ntype ClassType = {\n  classList: ValueItemsType;\n  oldClassList: ObjClassListType;\n};\n\ntype RenderedKeyType = string | DynamicKeyObjectType | undefined;\n\ntype ValueValueType =\n  | FunctionEventType\n  | AttributesValType\n  | DynamicTextType\n  | CampleImportType\n  | ClassType;\n\ntype ValueType = {\n  id?: IdType;\n  type: "event" | "dynamicText" | "attribute" | "import" | "class";\n  value: ValueValueType;\n};\ntype ValuesTemplateType = Array&lt;ValueType&gt;;\ntype EachTemplateNodesType = Array&lt;number&gt;;\ntype EachTemplateType = {\n  el: Element | null;\n  key?: ValueItemsType;\n  nodes: EachTemplateNodesType;\n  values: ValuesTemplateType;\n};\ntype ElementsType = Element[];\ntype DynamicNodeComponentNodeType = ChildNode | null | undefined;\ntype DynamicNodeComponentParentNodeType = ParentNode | null | undefined;\ntype EachDynamicNodeComponentType = {\n  import?: ImportObjectType;\n  parentNode: ParentNode;\n  template?: EachTemplateType;\n  keys?: ArrayStringType;\n  nodes: Array&lt;NodeType&gt;;\n  nodeNext: DynamicNodeComponentNodeType;\n  nodePrevious: DynamicNodeComponentNodeType;\n  nodeParentNode: DynamicNodeComponentParentNodeType;\n  id: number;\n};\ntype ImportDataType = {\n  [key: string]: any;\n};\ntype DataExportObjectDataType = {\n  [key: string]: ExportTemplateDataType;\n};\ntype DataIndexesValueType = {\n  [key: string]: Array&lt;number | [number]&gt;;\n};\n\ntype DataIndexesObjectType = {\n  data: DataIndexesValueType;\n  functions: DataIndexesValueType;\n};\n\ntype DataIndexesType = {\n  [key: string]: DataIndexesObjectType;\n};\n\ntype ExportObjectDataType = {\n  data: DataExportObjectDataType;\n  indexesData: DataIndexesType;\n  index: number;\n  constructor: DataExportObjectDataType;\n};\n\ntype ExportObjectDataArrayType = Array&lt;ExportObjectDataType&gt;;\n\ntype ComponentDynamicNodeComponentType = {\n  id: number;\n  functions: FunctionsType;\n  exportData?: ExportDataType;\n  nodes: Array&lt;NodeType&gt;;\n  exportObject?: ExportObjectDataType;\n  import?: ImportObjectType;\n};\ntype ArrayAnyType = Array&lt;any&gt;;\n\ntype DataExportObjectType = {\n  [key: string]: ExportDataArrayType;\n};\n\ntype DynamicNodeComponentType =\n  | EachDynamicNodeComponentType\n  | ComponentDynamicNodeComponentType;\n\ntype LastNodeType = Element | ChildNode | ParentNode;\n\ntype ScriptElementsType = {\n  [key: string]: Element | null | Array&lt;Element | null&gt;;\n};\ntype ScriptArgumentsType = {\n  elements: ScriptElementsType;\n  functions: FunctionsType;\n  currentData: DataType | undefined;\n  importedData?: DataType;\n};\n\ntype DynamicType = {\n  data: {\n    values: Array&lt;DynamicDataType&gt;;\n    components: Array&lt;DynamicNodeComponentType&gt;;\n    currentId: number;\n  };\n};\ntype ValuesArguments = {\n  [key: string]: any;\n};\ntype ValuesValueType = {\n  [key: string]: {\n    [key: string]: boolean;\n  };\n};\ntype ValuesType = (args: ValuesArguments) =&gt; ValuesValueType;\ntype ArgumentsArrayType = Array&lt;any&gt;;\n\ntype EventGetDataType = (\n  key: string,\n  dataId: number,\n  index: IndexType\n) =&gt; any;\n\ntype EventEachGetDataType = (\n  key: string,\n  dataId: number,\n  keyEl: string | undefined,\n  index: number\n) =&gt; any;\n\ntype EventEachGetFunctionType = (\n  key: string,\n  dataId: number,\n  keyEl: string | undefined\n) =&gt; any;\n\ntype EventFunctionType = (...args: any[]) =&gt; any;\n\ntype ListenerValueType = {\n  value: EventKeyObjectType;\n  fn?: EventFunctionType;\n};\n\ntype ListenersType = {\n  [key: string]: ListenerValueType;\n};\ntype DynamicTextsObj = {\n  id: IdType;\n  dynamicTexts: DynamicTextArrayType;\n};\ntype DynamicTextsType = Array&lt;DynamicTextsObj&gt;;\ntype DynamicAttributesType = Array&lt;AttributesValObjType&gt;;\ntype CurrentKeyType = {\n  originKey: string;\n  key: string;\n  properties?: Array&lt;string&gt;;\n  isProperty?: boolean;\n  isOrigin?: boolean;\n  isValue?: boolean;\n  isClass?: boolean;\n};\ntype NodeTextType = {\n  key: CurrentKeyType;\n  value: string;\n};\n\ntype NodeValueType = {\n  render: any;\n  type: "dynamicText" | "attribute" | "class";\n  value: AttributesValType | NodeTextType | ClassType;\n};\ntype NodeValuesType = Array&lt;NodeValueType&gt;;\ntype NodeType = {\n  isNew?: boolean;\n  index: number;\n  key?: string;\n  el?: Node;\n  values: NodeValuesType;\n  dataId: number;\n};\n\ntype ArrayNodeType = Array&lt;NodeType&gt;;\n\ntype DynamicKeyObjectType = {\n  key: string;\n  properties: Array&lt;string&gt;;\n};\ntype DynamicKeyObjectArrayType = Array&lt;DynamicKeyObjectType&gt;;\n\ntype EventKeyObjectType = {\n  key: string;\n  arguments: ArgumentsArrayType;\n};\n\ntype EventKeyObjectArrayType = Array&lt;EventKeyObjectType&gt;;\n\ntype DynamicKeyType = string | DynamicKeyObjectType;\n\ntype DynamicKeyArrayType = Array&lt;DynamicKeyType&gt;;\n\ntype ArrayStringType = Array&lt;string&gt;;\n\ntype ElementType = {\n  selector: string;\n  id?: string;\n  class?: string;\n  attributes?: AttributesType;\n};\n\ntype FunctionsArrayType = [\n  (...args: any[]) =&gt; (...args: any[]) =&gt; any,\n  string\n];\ntype FunctionsObjType = {\n  [key: string]: string | FunctionsArrayType;\n};\n\ntype RootOptionsType = {\n  attributes?: AttributesType;\n  style?: StyleType;\n  replaceTag?: boolean;\n  replaceTags?: boolean;\n  trimHTML?: boolean;\n  export?: ExportDataType;\n  exportId?: ExportIdType;\n};\n\ntype DefaultOptionsType = RootOptionsType & {\n  element?: ElementType;\n};\n\ntype ComponentRenderType = "dynamic" | "static";\n\ntype DefaultDataOptionsType = RootOptionsType & {\n  import?: ImportObjectType;\n  script?: ScriptType;\n  values?: ValuesType;\n  functions?: FunctionsObjType;\n};\ntype IndexValueDataType = {\n  [key: string]: number;\n};\ntype IndexValuFunctionsType = {\n  [key: string]: number;\n};\ntype IndexValuesType = {\n  data: IndexValueDataType;\n  functions: IndexValuFunctionsType;\n};\ntype ArrayExportTamplateStringType = Array&lt;string | undefined&gt;;\n\ntype ExportTemplateDataType = {\n  data: {\n    [key: string]: ArrayExportTamplateStringType;\n  };\n  functions: {\n    [key: string]: ExportTemplateFunctionArrayType;\n  };\n};\n\ntype ImportObjectArrayType = {\n  data?: ArrayStringType;\n  functions?: ArrayStringType;\n};\n\ntype ExportTemplateDataNewType = {\n  data: {\n    [key: string]: ArrayExportTamplateStringType | string;\n  };\n  functions: {\n    [key: string]: ExportTemplateFunctionArrayType;\n  };\n};\n\ntype ExportTemplateFunctionArrayType = Array&lt;\n  ExportTemplateFunctionsValueType | undefined\n&gt;;\n\ntype ExportTemplateFunctionType = (...args: any[]) =&gt; void;\n\ntype ExportTemplateFunctionsValueType = [\n  ExportTemplateFunctionType,\n  string\n];\n\ntype ExportTemplateFunctionsType = {\n  [key: string]: ExportTemplateFunctionsValueType;\n};\n\ntype ExportTemplateValueDataType = {\n  [key: string]: string | ArrayStringType;\n};\ntype TemplateExportValueType = {\n  data?: ExportTemplateValueDataType;\n  functions?: ExportTemplateFunctionsType;\n};\n\ntype ExportDynamicType = {\n  [key: string]: TemplateExportValueType;\n};\n\ntype IterationFunctionType = (...args: any[]) =&gt; void;\n\ntype EachOptionsType = DefaultDataOptionsType & {\n  functionName?: string;\n  valueName?: string;\n  importedDataName?: string;\n  componentData?: boolean;\n  indexName?: string;\n  iteration?: IterationFunctionType;\n};\n\ntype DataPropertyType = {\n  value?: any;\n};\n\ntype DataType = {\n  [key: string]: any | DataPropertyType;\n};\n\ntype ElementsOptionsType = {\n  [key: string]: string;\n};\n\ntype StartType = "afterLoad" | "beforeLoad";\n\ntype ScriptOptionsType = {\n  start?: StartType;\n  elements?: ElementsOptionsType;\n};\n\ntype ExportDataArrayType = Array&lt;ExportDataType | undefined&gt;;\n\ntype IdType = number | undefined;\n\ntype ScriptFunctionType = (...args: any[]) =&gt; void;\ntype CycleValueType = { value: string; index: string };\ntype ScriptType =\n  | [ScriptFunctionType, ScriptOptionsType]\n  | ScriptFunctionType;\n\ntype ExportDataValuesValueType = {\n  [key: string]: any;\n};\n\ntype ExportDataType = {\n  [key: string]: ExportDataValuesValueType;\n};\n\ntype ExportDataValueType = {\n  value: {\n    [key: string]: any;\n  };\n  components: Array&lt;any&gt;;\n};\n\ntype ExportCampleDataType = {\n  [key: string]: ExportDataValueType;\n};\ntype ComponentTemplateType = string | ComponentTemplateFunctionType;\ntype ComponentTemplateArgumentType = {\n  data: DataType | undefined;\n};\ntype ComponentTemplateFunctionType = (\n  argument?: ComponentTemplateArgumentType\n) =&gt; string;\n\ntype ExportFunctionDataOptionsType = {\n  data: DataType | undefined;\n};\n\ntype ExportFunctionDataType = (\n  arg: ExportFunctionDataOptionsType\n) =&gt; ExportDataType;\n\ntype ExportDynamicDataType = ExportFunctionDataType | ExportDataType;\n\ntype DataFunctionArgumentsType = {\n  importedData?: ExportDataType;\n  currentData?: DataType | EachDataValueType;\n};\n\ntype DataFunctionType = (\n  argument?: DataFunctionArgumentsType\n) =&gt; DataType;\n\ntype ComponentOptionsType = DefaultDataOptionsType & {\n  data?: DataType | DataFunctionType;\n};\n\ntype AnimationElementType = {\n  selector: string;\n  id?: string;\n  class?: string;\n  transition?: string;\n  attributes?: AttributesType;\n};\n\ntype ExportIdType = string | number;\n\ntype AnimationOptionsType = {\n  event: string;\n  reverseEvent?: string;\n  attributes?: AttributesType;\n  styleAnimation: string;\n  style?: string;\n  class: string;\n  transition?: string;\n  element?: AnimationElementType;\n  replaceTag?: boolean;\n  replaceTags?: boolean;\n  trimHTML?: boolean;\n  export?: ExportDataType;\n  exportId?: ExportIdType;\n};\n\ntype FunctionsType = {\n  [key: string]: any;\n};\n</code></pre> </div> </div>'),ee=new O("getting-started-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Getting started:</h1> <hr class="section_line"> <h2>Starting usage:</h2> <p>After installing the framework, described in the <a href="/documentation/installation.html">Installation</a> section, an instance of the <a href="/documentation/cample.html">Cample</a> class is created, which is the main handler for all components.</p> <h3>Javascript file:</h3> <pre><code>const newComponent \n= component("new-component",\n"component")\n            \nconst newCample = cample("#page");\nnewCample.render(`\n    &lt;div class="content"&gt;\n        &lbrace; &lbrace;newComponent&rbrace; &rbrace;\n    &lt;/div&gt;\n`,{\n    newComponent\n});</code></pre> <h3>HTML file:</h3> <pre><code>&lt;div id="page"&gt;&lt;/div&gt;</code></pre> <h2>Classes instance:</h2> <p>In Cample.js, all components are created using "new" or "class function". The "class function" does the same thing as creating with "new".</p> <h3>new:</h3> <pre><code>const newComponent \n= new Component(\n  string,\n  string,\n  object,\n  object\n);</code></pre> <h3>class function:</h3> <pre><code>const newComponent \n= component(\n  string,\n  string,\n  object,\n  object\n);</code></pre> <p>The default framework uses two ways to create components. The more preferable of these is the method of creation through "class functions", since, in general, less code is obtained.</p> <h2>Examples project:</h2> <ul class="list"> <li class="list_item"> <a href="/examples.html">Example #1</a> </li> <li class="list_item"> <a href="/examples/clicker.html">Example #2</a> </li> <li class="list_item"> <a href="/examples/taskTracker.html">Example #3</a> </li> </ul> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/installation.html">Installation</a> </li> <li class="list_item"> <a href="/documentation/cample.html">Cample</a> </li> </ul> </div> </div>'),te=new O("button-component",'<a class="button" href="{{link}}">{{text}}</a> ',{data:e=>({text:e?.importedData?.text,link:e?.importedData?.link}),import:{value:[],exportId:"contentId"}}),ne=new O("note-component",'<div class="note"> <span class="note_span">New documentation for alpha versions is being prepared</span> </div> ',{}),ae=new O("reactivity-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Reactivity:</h1> <hr class="section_line"> <h2>About:</h2> <p>In order to process dynamically incoming information from the server, the framework provides functionality of a reactivity.</p> <h2>Concept of reactivity:</h2> <p>Reactivity means changing HTML elements dynamically depending on the data. Cample.js dynamically updates the HTML without using the Virtual DOM.</p> <h2>Reactivity example:</h2> <h3>Before string interpolation</h3> <pre><code>&lt;div class="&lbrace; &lbrace;component_text&rbrace; &rbrace;"&gt;\n    &lbrace; &lbrace;component_text&rbrace; &rbrace;\n&lt;/div&gt;</code></pre> <h3>After string interpolation:</h3> <pre><code>&lt;div class="text"&gt;\n    text\n&lt;/div&gt;</code></pre> <h3>After updating data:</h3> <pre><code>&lt;div class="text1"&gt;\n    &lt;div&gt;some new tag&lt;/div&gt;\n    text1\n&lt;/div&gt;</code></pre> <h2>Example:</h2> <pre><code>const newComponent = component(\n"new-component",\n`&lt;div class="component"&gt;\n    &lt;div id="clicks" data-value="{ {dynamicData} }"&gt;Data:{ {dynamicData} }&lt;/div&gt;\n    &lt;button id="buttonId"&gt;Update data&lt;/button&gt;\n&lt;/div&gt;`,\n{\n    script: [\n    ({ elements, functions }) => {\n        const updateFunction = (e) => {\n        functions?.updateData((data) => {\n            return "newData";\n        });\n        };\n        elements?.button?.addEventListener("click", updateFunction);\n    },\n    {\n        start: "afterLoad",\n        elements: [{ button: "#buttonId" }],\n    },\n    ],\n    data: () => {\n    return {\n        dynamicData: "data",\n    };\n    },\n    functions: {\n        updateData: "dynamicData",\n    },\n}\n);\ncample("#page", {\n    trimHTML: true,\n}).render(\n`\n&lt;template data-cample="new-component"&gt&lt;/template&gt;\n`,\n{\n    newComponent,\n}\n);</code></pre> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/component.html">Component</a> </li> </ul> </div> </div>'),oe=new O("each-component",'<div id="documentation_main"> <template data-cample="sidebar-component"></template> <div class="documentation_page"> <h1>Each:</h1> <hr class="section_line"> <h2>About:</h2> <p>The Each component is used to create repetition of HTML markup.</p> <h2>Class function:</h2> <pre><code>const newEach = each("new-each",\n    ()=>["val"],\n    "&lt;div key={ {index} }&gt;&lbrace; &lbrace;data&rbrace; &rbrace;&lt;/div&gt"\n);</code></pre> <h3>Render in HTML file:</h3> <h4>HTML file:</h4> <h5>before render:</h5> <pre><code>&lt;template data-cample="new-each"&gt;\n    &lt;div&gt;text&lt;/div&gt;\n    &lt;div&gt;text&lt;/div&gt;\n&lt;/template&gt;</code></pre> <h5>after render:</h5> <pre><code>&lt;div&gt;text&lt;/div&gt;\n&lt;div&gt;text&lt;/div&gt;</code></pre> <h2>Arguments:</h2> <p>The Each component has four arguments, the first is the value of the "data-cample" attribute (selector), the second is data, the third is an HTML template containing string interpolation, and the fourth is a settings object.</p> <h3>selector:</h3> <p>The selector is the value of the "data-cample" attribute of the template in which the component will be rendered. For example, if the selector is set to "new-selector", then the HTML "template" into which the component will be rendered will look like this:</p> <pre><code>&lt;template data-cample="new-each"&gt;&lt;/template&gt;</code></pre> <p>It is worth noting that there can be as many "template" tags on a site as you like (within the memory of the machine where the site is located). That is, if there are 100 "templates" with the "new-each" attribute, then 100 components will be rendered.</p> <h3>data:</h3> <p>The data is a function that returns an object or array on which to perform repetition of the HTML markup. An examples of a data:</p> <pre><code>({importedData, currentData})=>{\n    return {\n        ...importedData,\n        ...currentData,\n        property:"value"\n    }\n}</code></pre> <pre><code>({importedData, currentData})=>[\n    ...importedData,\n    ...currentData,\n    "value"\n]</code></pre> <p>Also, the function arguments receive an object with two properties, the first of which is the current data, and the second is the imported data. In order to modify the old data thanks to the new ones without overwriting the old ones, the current data is provided.</p> <h3>template:</h3> <p>A template is essentially a string that will be rendered in a "template" with a "data-cample" attribute. The template is different from the <a href="/documentation/component.html">Component</a> template. This template does not yet support the "data-cample-import" attribute, but other syntaxes such as ":event" are supported. In future versions, all templates will be brought to the same syntax.</p> <pre><code>&lt;div key={ {index} } class="{ {importedData.data} }"&gt;\n    &lt;div id="{ {currentData.data} }"&gt;\n        &lt;div :click={ {setData(currentData.data)} } &gt;{ { data.data } }&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n        </code></pre> <p>Also, a necessary property for template is the "key" property. This property must be unique. It is needed to ensure that blocks are not overwritten when processing new data.</p> <p>The keys by which the data will be processed in the template will be the same keys that are specified in the valueName, importedDataName, indexName and functionName properties.</p> <p>Each also provides for adding an event listener for the element via string interpolation. The template itself looks like ":event="function(argumentsData)"". The data that is processed by the function in the arguments is only the data keywords from the data passed to the "template" in the string interpolation. These are data such as importedData, currentData, functions, data.</p> <h3>options:</h3> <p>The options object describes the scripts, attributes, data, styles of the component, etc. Each of the listed properties describes a property of an object.</p> <h4>script:</h4> <p>Either an array with two values is passed to the property of the script object, the first of which is a function that takes the values of the elements described in the settings, as well as a data update function, which by default has the name "setData", or has the name that is set using the "functionName" property in the settings object, as well as imported data, and the second of which is the script settings object that takes two arguments: "start" and "elements", or a function of the first array argument. The first argument to start takes three values: "beforeLoad", "afterLoad", and undefined. This argument describes when the script function should be executed before or after the component is loaded. If no values are defined, the function will be loaded after. The second argument is the elements object. The object has the following form, where each key:value pair is: "element name: HTML element selector". An example of a script:</p> <pre><code>{\nscript:[({elements, functions, currentData, importedData})=>{\n        elements.component[0]\n        .addEventListener\n        ("click",()=>{\n            console.log(\n                elements.component\n            );\n        })\n        const updateFunction = (e) =>{\n            functions?.setData\n            (data=>{\n              return "Text";\n            });\n        }\n        document\n        .addEventListener("onload",\n        updateFunction);\n        console.log(data);\n    },\n    {\n        start:\'afterLoad\',\n        elements:{ component: ".component" }\n    }]\n}</code></pre> <p>In this example, the "functionName" property was not set, so the function has the value "setData" on the functions object.</p> <p>In Each, the "elements" property works a little differently than in <a href="/documentation/component.html">Component</a>. Each property of "elements" gets an array with the values of each repeated template.</p> <p>Also, the framework supports a script without an array. That is, a function can also be passed to a value.</p> <pre><code>{\n    script:({ elements, functions, currentData, importedData })=>{\n        console.log("123");\n    }\n}</code></pre> <p>The object passed in the array will also be passed to the function arguments.</p> <h4>iteration:</h4> <p>The iteration property specifies a function that iterates exactly as many times as the number of times Each is iterated.</p> <pre><code>{\n    iteration:({ data, importedData }, index)=>{\n        console.log("123");\n    }\n}</code></pre> <p>As arguments, the function receives as the first argument an object with iteration data, the default name of which comes from "valueName" and imported data, the default name of which comes from "importedDataName", and also receives the number in the iteration as the second argument.</p> <h4>valueName:</h4> <p>The valueName property sets the name of the property by which data will be available for the corresponding iteration of Each. An example of the valueName:</p> <pre><code>{\n    valueName:"dataValue"\n}</code></pre> <p>In this example, valueName is set to the value "dataValue", by which the data of a particular iteration will be available in the template. By default, valueName is "value".</p> <h4>indexName:</h4> <p>The valueName property specifies the name of the property by which the iteration number will be available.</p> <pre><code>{\n    indexName:"i"\n}</code></pre> <p>In this example, indexName is set to "i", by which the iteration number will be available in template. By default, indexName is "index". Just like in vanilla js, iteration numbers start from 0.</p> <h4>functionName:</h4> <p>The functionName property specifies the name of the function that changes the data in the "script" and template. An example of the functionName:</p> <pre><code>{\n    functionName:"dataFunction"\n}</code></pre> <p>In this example, functionName is set to "dataFunction" which will access the function in the "script" or template that will update the data. The default functionName is "setData".</p> <h4>importedDataName:</h4> <p>The importedData property specifies the name of the imported data. An example of the importedData:</p> <pre><code>{\n    importedDataName:"newData"\n}</code></pre> <p>In this example, importedDataName is set to "newData" which will access the importedData in the "script" and template. The default importedDataName is "importedData".</p> <h4>attributes:</h4> <p>The attributes property contains an object of the HTML attributes and their values that will be processed in the template. An example of the attributes:</p> <pre><code>("new-each",\n...,\n{\n    attributes:{\n        id:"id"\n    }\n})</code></pre> <p>In this example, a template with a "data-cample" value of "new-each" will be given a id "id".</p> <h4>import:</h4> <p>The import property sets the "data-cample-import" attribute. This attribute specifies data to import specific exported data. An example of the import:</p> <pre><code>import:{\n    value:["text"],\n    exportId:"textId"\n}</code></pre> <p>For example, if a component was given import data in other components, then the import object will overwrite them in the tag attribute.</p> <h5>value:</h5> <p>The value property on the import object specifies a list of exported values that will be imported into the component. An example of the value:</p> <pre><code>{\n    value:["text", "text1"]\n}</code></pre> <p>In this example, two values are passed to the "data-cample-import" property: "text" and "text1".</p> <h5>exportId:</h5> <p>In order to understand which component to import data from, the import object provides such a property as exportId. This property is set in the component that exports the data. It is set either in the options object. An example of the exportId:</p> <pre><code>{\n    exportId:"textId"\n}</code></pre> <p>In this example, the data will be imported from a component that will have its exportId set to "textId".</p> <h4>export:</h4> <b>Export under cunstruction!</b> <h4>exportId:</h4> <p>The exportId property specifies the export identifier, by which the component will "determine" where to get the data from. An example of the exportId:</p> <pre><code>{\n    exportId:"textId"\n}</code></pre> <p>In this example, to export specific data, "exportId" is set with the value "textId".</p> <h4>style:</h4> <p>The style property contains a string that is inserted into the HTML style tag. This string is the stylesheet syntax, i.e. cascading style sheets syntax. An example of a style:</p> <pre><code>{\n    style:`\n        .component{\n            width:100px;\n            height:100px;\n        }\n    `\n}</code></pre> <p>Each styles are rendered in the style tag, thus it is possible to create styles in one component for another.</p> <h4>values:</h4> <p>The values property receives a function that takes an object with the current data, importedData and data. This function returns an object in which each property gets a boolean value. If the value is true, then the value of the associated property will be added to the template. If false, then just "" will be added. The values property is needed to create a dynamic string that depends on the data.</p> <pre><code>values: ({ currentData, data, importedData }) => {\n    return {\n        selectedValue: {\n            selected:currentData.select === true,\n        },\n    };\n}</code></pre> <p>In this example, if the "select" property of the current data is true, then the line "selected" will be output in the interpolation of strings, if false, then the string "" will be output.</p> <h5>HTML before:</h5> <pre><code>&lt;div class={ { [selectedValue] } }&gt;\n    { { [selectedValue] } }\n&lt;/div&gt;</code></pre> <h5>HTML after:</h5> <pre><code>&lt;div class="selected"&gt;\n    selected\n&lt;/div&gt;</code></pre> <p>Also, it\'s worth noting that in string interpolation, values are "passed as an array". The key to the dynamic string in this example is the "selectedValue" value.</p> <h4>trimHTML:</h4> <p>Depending on the value of the trimHTML property, the javascript trim() method is applied to the HTML string.</p> <pre><code>{\n  trimHTML:false\n}</code></pre> <p>This will avoid the errors associated with rendering a single Element in the component, but also the HTML may not be displayed correctly.</p> <h2>Example code:</h2> <pre><code>const newEach = new Each(\n"new-each",\n() => ["val1", "val2"],\n`&lt;tr key={ {index} } id="row" class="{ {[selected]} }"&gt;\n    &lt;td&gt;{ {row.id} }&lt;/td&gt;\n    &lt;td&gt;&lt;a :click="{ {importedData.setSelected(row.id)} }"&gt;{ {row.label} }&lt;/a&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;`,\n{\n    values: ({ row, importedData }) => {\n        return {\n            selected: {\n                selected: row.id === importedData.selected,\n            },\n        };\n    },\n    script: [\n        (obj) => console.log(obj),\n    {\n        elements: [\n        {\n            rowEl: "#row",\n        },\n        ],\n    },\n    ],\n    valueName: "row",\n    functionName: "updateTable",\n    importedDataName: "importData",\n    import: {\n        value: ["rows", "selected", "setSelected"],\n        exportId: "mainExport",\n    },\n    exportId: "exportId",\n    trimHTML: true,\n    style: "#row{ width:10px; }",\n    attributes: {\n        id: "id",\n    },\n}\n);</code></pre> <h2>Each table:</h2> <table> <thead> <tr> <th colspan="3">Arguments:</th> </tr> <tr> <th>Name</th> <th>Usage</th> <th>Type</th> </tr> </thead> <tbody> <tr> <td>selector</td> <td>The value of the "data-cample" property of the template tag into which the component will be rendered.</td> <td>SelectorType</td> </tr> <tr> <td>data</td> <td>Data for repeating HTML markup.</td> <td>EachDataFunctionType</td> </tr> <tr> <td>template</td> <td>HTML rendering template including string interpolation.</td> <td>string</td> </tr> <tr> <td>options</td> <td>Object options.</td> <td>EachOptionsType | undefined</td> </tr> </tbody> </table> <h2>Articles:</h2> <ul class="list"> <li class="list_item"> <a href="/documentation/Component.html">Component</a> </li> </ul> </div> </div>'),ie=new O("clicker-component",'<div id="examples_main"> <template data-cample="sidebar-component"></template> <div class="example_page"> <p class="codepen" data-height="700px" data-theme-id="light" data-default-tab="js,result" data-slug-hash="rNrVjmp" data-editable="true" data-user="Camplejs" style="height:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em"> <span>See the Pen <a href="https://codepen.io/Camplejs/pen/rNrVjmp"> Reactivity without Virtual DOM</a> by Cample.js (<a href="https://codepen.io/Camplejs">@Camplejs</a>) on <a href="https://codepen.io">CodePen</a>.</span> </p> </div> </div> '),re=new O("taskTracker-component",'<div id="examples_main"> <template data-cample="sidebar-component"></template> <div class="example_page"> <p class="codepen" data-height="700px" data-theme-id="light" data-default-tab="js,result" data-slug-hash="bGORJPG" data-editable="true" data-user="Camplejs" style="height:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em"> <span>See the Pen <a href="https://codepen.io/Camplejs/pen/bGORJPG"> Task Tracker</a> by Cample.js (<a href="https://codepen.io/Camplejs">@Camplejs</a>) on <a href="https://codepen.io">CodePen</a>.</span> </p> </div> </div> ');function se(e,t,n){let a={header:M,footer:V};const o=""===window.location.pathname.slice(1)||"examples.html"===window.location.pathname.slice(1)||"examples/clicker.html"===window.location.pathname.slice(1)||"examples/taskTracker.html"===window.location.pathname.slice(1);return o&&(a.note=ne),Object.keys(t).forEach((e=>{a[e]=t[e]})),new p(e,{trimHTML:!0}).render(`\n        ${o?"{{note}}":""}\n        {{header}}\n        <div id="content">\n        ${n}\n        </div>\n        {{footer}}\n    `,a)}switch(console.log("Cample.js - typed javascript web framework for creating site UI."),window.location.pathname.slice(1)){case"":se("#page",{content:K,button:te},"{{content}}");break;case"examples.html":se("#examples",{examples:U,sidebarExample:B},"{{examples}}");break;case"examples/clicker.html":se("#examples",{clicker:ie,sidebarExample:B},"{{clicker}}");break;case"examples/taskTracker.html":se("#examples",{taskTracker:re,sidebarExample:B},"{{taskTracker}}");break;case"documentation.html":se("#documentation",{documentation:J,sidebar:q},"{{documentation}}");break;case"documentation/cample.html":se("#documentation",{cample:X,sidebar:q},"{{cample}}");break;case"documentation/installation.html":se("#documentation",{installation:z,sidebar:q},"{{installation}}");break;case"documentation/component.html":se("#documentation",{component:W,sidebar:q},"{{component}}");break;case"documentation/operators.html":se("#documentation",{operators,sidebar:q},"{{operators}}");break;case"documentation/each.html":se("#documentation",{each:oe,sidebar:q},"{{each}}");break;case"documentation/getting-started.html":se("#documentation",{gettingStarted:ee,sidebar:q},"{{gettingStarted}}");break;case"documentation/introduction.html":se("#documentation",{introduction:Y,sidebar:q},"{{introduction}}");break;case"documentation/types.html":se("#documentation",{types:Z,sidebar:q},"{{types}}");break;case"documentation/reactivity.html":se("#documentation",{reactivity:ae,sidebar:q},"{{reactivity}}")}})()})();
